@page "/search/{SearchTerm}"
@inject HttpClient Http

<PageTitle>Search Trails - Blazing Trails</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">Search</li>
    </ol>
</nav>
<h3 class="mt-5 mb-4">Search results for @SearchTerm</h3>
@if (_searchResults == null)
{
    <p>Loading trails...</p>
}
else
{
    <TrailDetails Trail="_selectedTrail" />
    <div class="grid">
        @foreach (var trail in _searchResults)
        {
            <TrailCard Trail="trail" OnSelected="HandleSelectedTrail" />
        }
    </div>
}

@code {
    private IEnumerable<Trail>? _searchResults;
    private Trail? _selectedTrail;
    [Parameter] public string SearchTerm { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allTrails = await Http.GetFromJsonAsync<IEnumerable<Trail>>("trails/trail-data.json");
            _searchResults = allTrails!
                .Where(x => x.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase)
                || x.Location.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));
        }
        catch (HttpRequestException err)
        {
            Console.WriteLine($"There was a problem loading trail data: {err.Message}");
        }
    }

    private void HandleSelectedTrail(Trail trail) => _selectedTrail = trail;
}